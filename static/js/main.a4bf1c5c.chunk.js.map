{"version":3,"sources":["comments.js","usercard.js","userslist.js","posts.js","App.js","serviceWorker.js","index.js"],"names":["Comment","props","state","comments","params","this","match","axios","get","then","res","console","log","data","alias","filter","it","postId","id","setState","className","map","el","name","body","Component","UserCard","user","company","address","city","to","email","url","element","catch","err","UsersList","users","item","Posts","posts","userId","title","src","alt","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAsCeA,E,YAnCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEC,SAAU,IAFV,E,iFAIE,IAAD,OACCC,EAAaC,KAAKJ,MAA3BK,MAASF,OACjBG,IAAMC,IAAI,iDAELC,MAAK,SAAAC,GACFC,QAAQC,IAAI,YAAaF,EAAIG,MAC7B,IAAMC,EAAQJ,EAAIG,KAAKE,QAAO,SAAAC,GAAE,OAAIA,EAAGC,QAAUb,EAAOc,MAExD,EAAKC,SAAS,CACVhB,SAAUW,IAEdH,QAAQC,IAAI,UAAW,EAAKV,MAAMC,e,+BAM1C,OACI,yBAAKiB,UAAU,eACVf,KAAKH,MAAMC,SAASkB,KAAI,SAAAC,GAAE,OACvB,0BAAMF,UAAU,WAEZ,4BAAKE,EAAGC,MACR,4BAAKD,EAAGE,e,GA5BVC,a,QCwBPC,EAvBE,SAACzB,GAAW,IAAD,EACFA,EAAd0B,YADgB,MACT,GADS,EAGxB,OACI,yBAAKP,UAAU,aAEX,yBAAKA,UAAU,eAEf,yBAAKA,UAAU,aAAaO,EAAKJ,KAAjC,KACA,yBAAKH,UAAU,SAASO,EAAKC,QAAQL,MACrC,yBAAKH,UAAU,SAASO,EAAKE,QAAQC,KAArC,KACA,kBAAC,IAAD,CAAMC,GAAE,iBAAYJ,EAAKT,KAAM,4BAAQE,UAAU,QAAlB,gBAC/B,yBAAKA,UAAU,QAAf,IAAwBO,EAAKK,MAA7B,OCTNC,EAAM,6CAIZ1B,IAAMC,IAAIyB,GACLxB,MAAK,SAAAC,GAAQ,IAAD,uBAET,YAAsBA,EAAIG,KAA1B,+CAAgC,CAAC,IAAtBqB,EAAqB,QAC5BvB,QAAQC,IAAIsB,EAAQX,OAHf,sFAMZY,OAAM,SAAAC,GAEHzB,QAAQC,IAAI,6B,IAqDLyB,E,YA9CX,WAAYpC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACToC,MAAO,IAHI,E,iFAOE,IAAD,OAChB/B,IAAMC,IAAIyB,GACLxB,MAAK,SAAAC,GACFC,QAAQC,IAAI,QAASF,GAErB,EAAKS,SAAS,CACVmB,MAAO5B,EAAIG,UAGlBsB,OAAM,SAAAC,GAEHzB,QAAQC,IAAI,+B,+BAMpB,OAMI,yBAAKQ,UAAU,cAEPf,KAAKH,MAAMoC,MAAMjB,KAAI,SAACkB,GAClB,OACI,kBAAC,EAAD,CAAUZ,KAAMY,Y,GAnCpBd,aCmDTe,E,YAlEX,WAAYvC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTuC,MAAO,IAHI,E,iFAWE,IAAD,OACCrC,EAAaC,KAAKJ,MAA3BK,MAASF,OACjBG,IAAMC,IAAI,8CACLC,MAAK,SAAAC,GAGFC,QAAQC,IAAI,YAAaF,EAAIG,MAC7B,IAAMC,EAAQJ,EAAIG,KAAKE,QAAO,SAAAC,GAAE,OAAIA,EAAG0B,QAAUtC,EAAOc,MACxD,EAAKC,SAAS,CACVsB,MAAO3B,IAEXH,QAAQC,IAAI,kBAAmB,EAAKV,MAAMuC,OAC1C9B,QAAQC,IAAI,aAAcR,EAAOc,OAEpCiB,OAAM,SAAAC,GAEHzB,QAAQC,IAAI,+B,+BAOpB,OAEI,yBAAKQ,UAAU,YAEVf,KAAKH,MAAMuC,MAAMpB,KAAI,SAAAC,GAAE,OACpB,0BAAMF,UAAU,QAEZ,4BAAKE,EAAGqB,OACR,4BAAKrB,EAAGE,MACR,6BACA,kBAAC,IAAD,CAAMO,GAAE,mBAAcT,EAAGJ,KACrB,yBACIE,UAAU,cACVwB,IAAI,wFACJC,IAAI,uB,GAjDhBpB,a,OC2BLqB,EA5BH,WAMV,OACE,kBAAC,IAAD,KACE,yBAAK1B,UAAU,YAEb,0BAAMA,UAAU,iBAEd,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IAEjC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,aAAaC,UAAWT,IAC1C,kBAAC,IAAD,CAAOQ,KAAK,eAAeC,UAAWjD,QCX5BkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/C,MACvB,2DCZNgD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,kB","file":"static/js/main.a4bf1c5c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nclass Comment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { comments: [] }\r\n    }\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n        axios.get('https://jsonplaceholder.typicode.com/comments')\r\n\r\n            .then(res => {\r\n                console.log('resdata :', res.data)\r\n                const alias = res.data.filter(it => it.postId == params.id)\r\n\r\n                this.setState({\r\n                    comments: alias\r\n                })\r\n                console.log('state :', this.state.comments)\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='listComment'>\r\n                {this.state.comments.map(el =>\r\n                    <span className='comment'>\r\n\r\n                        <h2>{el.name}</h2>\r\n                        <h5>{el.body}</h5>\r\n\r\n                    </span>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Comment;","import React from 'react';\r\nimport { Link, } from 'react-router-dom'\r\n\r\nconst UserCard = (props) => {\r\n    const { user = {} } = props\r\n\r\n    return (\r\n        <div className=\"user-card\">\r\n\r\n            <div className=\"user-image\" />\r\n\r\n            <div className=\"user-name\">{user.name} </div>\r\n            <div className=\"text2\">{user.company.name}</div>\r\n            <div className=\"text1\">{user.address.city} </div>\r\n            <Link to={`/posts/${user.id}`}><button className=\"flow\"> Following </button></Link>\r\n            <div className=\"text\"> {user.email} </div>\r\n            \r\n            \r\n            \r\n           \r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCard","import UserCard from './usercard.js'\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst url = 'https://jsonplaceholder.typicode.com/users'\r\n\r\n\r\n\r\naxios.get(url)\r\n    .then(res => {\r\n\r\n        for (const element of res.data) {\r\n            console.log(element.name);\r\n        }\r\n    })\r\n    .catch(err => {\r\n        // an error happened\r\n        console.log('OOPS! an error occured')\r\n    })\r\n\r\n\r\n\r\n\r\nclass UsersList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(url)\r\n            .then(res => {\r\n                console.log('res :', res)\r\n\r\n                this.setState({\r\n                    users: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n\r\n                console.log('OOPS! an error occured')\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n\r\n\r\n\r\n\r\n            <div className=\"users-list\">\r\n                {\r\n                    this.state.users.map((item) => {\r\n                        return (\r\n                            <UserCard user={item} />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default UsersList ","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\n\r\nclass Posts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts: []\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n            .then(res => {\r\n\r\n\r\n                console.log('resdata :', res.data)\r\n                const alias = res.data.filter(it => it.userId == params.id)\r\n                this.setState({\r\n                    posts: alias\r\n                })\r\n                console.log('filtered list :', this.state.posts)\r\n                console.log('paramsid :', params.id)\r\n            })\r\n            .catch(err => {\r\n                // an error happened\r\n                console.log('OOPS! an error occured')\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className='listPost'>\r\n\r\n                {this.state.posts.map(el =>\r\n                    <span className='post'>\r\n\r\n                        <h1>{el.title}</h1>\r\n                        <h4>{el.body}</h4>\r\n                        <br />\r\n                        <Link to={`/comment/${el.id}`}>\r\n                            <img\r\n                                className=\"fit-picture\"\r\n                                src='https://tse3.mm.bing.net/th?id=OIP.hLTrJX4KQ6dKFOUdF9h5TgHaHa&pid=Api&P=0&w=300&h=300'\r\n                                alt=\"Comments\"\r\n                            >\r\n                            </img>\r\n                        </Link>\r\n                    </span>)}\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Posts;","import React from 'react';\nimport './App.css';\nimport Comment from './comments.js'\nimport UsersList from './userslist'\nimport Posts from './posts.js'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\n\nconst App = () => {\n\n\n\n\n\n  return (\n    <BrowserRouter>\n      <div className=\"user-app\">\n\n        <main className=\"user-app-main\">\n\n          <Route exact path='/' component={UsersList} />\n\n          <Route exact path=\"/posts/:id\" component={Posts} />\n          <Route path='/comment/:id' component={Comment} />\n\n\n        </main>\n      </div>\n    </BrowserRouter>\n\n\n  );\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}